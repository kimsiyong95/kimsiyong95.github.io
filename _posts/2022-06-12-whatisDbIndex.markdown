---
layout: post
title:  "데이터 베이스 인덱스를 B-Tree로 선택한 이유"
date:   2022-06-12 20:17:00 +0900
categories: Database
---

### 들어가며
인덱스란 데이터 베이스 테이블의 검색속도를 향상시키기 위한 자료구조이다. 예를 들어 설명하면 <br>
책의 원하는 내용을 찾고 싶을때, 모든 페이지를 찾아보면 시간이 오래걸리기 때문에 책갈피를 걸어놓는다<br>
라고 이해하면 될 것이다. 하지만 이 인덱스는 데이터의 저장, 수정, 삭제에 대한 성능을 줄이고 탐색에 대한<br>
성능을 높이는 방식이기 때문에 잘 모르는 상태로 걸면 성능 저하가 발생해 주의가 필요하다.<br>
위에서 인덱스는 자료구조라고 표현했는데 자료구조 중에서도 B-tree 를 사용한다. 데이터 베이스에서<br>
왜? B-tree를 선택했는지 정리해보겠다.

### 인덱스 자료구조 후보군

##### Hash Table
<img src="/public/img/hashTable.png"  width="600" height="300"/><br>
###### 출저 : https://helloinyong.tistory.com/296 <br><br>
key, value로 이뤄진 자료구조이며, 시간복잡도 O(1)을 가지며 검색이 빠른것이 특징이다. <br>
데이터 베이스 인덱스로 선택받지 못한 이유 : 부등호를 이용한 탐색이 시간복잡도를 보장 받을수 없어 적합하지않다.<br>

##### RedBlack-Tree
<img src="/public/img/redBlackTree.png"  width="500" height="300"/><br>
###### 출저 : https://helloinyong.tistory.com/296
자가 균형 이진 탐색 트리 로서, 대표적으로는 연관 배열 등을 구현하는 데 쓰이는 자료구조이다. <br>
데이터 베이스 인덱스로 선택받지 못한 이유 : 사실 레드블랙트리 같은 경우도 B-tree 와 같이 시간복잡도를 O(logN)<br>
가진다. 그럼에도 선택받지 못한 이유는 하나의 노드에 하나의 데이터만 저장이된다. 그렇기 때문에 데이터가 많이 질수록<br>
노드가 많아지고 참조 포인터 접근 수가 많아지기 때문에 탐색시간이 B-tree 보다 느릴수밖에 없다.<br>


##### Array
배열은 참조 포인터의 개념이 없기 때문에, 탐색 속도가 B-tree 보다 빠르다. 또한 부등호를 이용한 탐색도 가능하다.<br>
데이터 베이스 인덱스로 선택받지 못한 이유 : 탐색속도가 빠름에도 불구하고 치명적인 문제점이 있다.데이터의 저장<br>
삭제가 일어날때 데이터가 앞 뒤로 밀리거나 땡겨지므로 시간 복잡도가 O(N)이 걸리게 된다.

##### B-tree
<img src="/public/img/b-tree.png"  width="600" height="300"/><br>
###### 출저 : https://www.programiz.com/dsa/b-tree <br><br>
B-tree의 특징은 하나의 노드에 2개 이상의 데이터를 가질 수 있으며 자식 노드를 여러 개 가질 수 있어<br>
트리의 높이를 낮게 유지 할 수 있다. 여기서 오는 이점은 참조 포인터가 적어 빠른 접근이 가능하다.<br>
심지어 저장, 수정, 삭제 같은 경우도 O(logN)의 시간 복잡도를 가지기 때문에 안 쓸 이유가 없다.<br>

###### B-tree 한계
논리적 또는 물리적으로 연결된 순서에 따라 차례대로 블록을 읽어들이는 방식이기 때문에 복잡 해질수있다.<br>
이러한 표현을 시퀀셜 액세스에 취약하다고 말 할 수있다. 이러한 단점을 보완한게 바로 B+tree다.

##### B+Tree
B+Tree는 B-Tree의 단점을 개선시킨 자료구조이다. 어떤 단점을 개선 했는지 이전에 B-tree의 구조를 보자.<br>
###### B-tree 구조

<img src="/public/img/b-tree-struct.png"  width="600" height="300"/><br>
###### 출저 : http://blog.skby.net/b-tree-balanced-tree <br><br>

B-tree 같은 경우는 데이터를 Root Bloak, Branch Bloak, Leaf Bloak에 저장한다.<br>
하지만 B+tree 같은 경우는 데이터를 Leaf Bloak에만 저장하기 때문에 모든 블록을 찾을 필요없이<br> 
Leaf Bloak만 조회하면 된다. 그렇기 때문에 속도가 더 빠르다고 볼 수 있다. 참고로 말하자면<br>
MySQL의 DB engine인 InnoDB는 B+tree 방식을 사용하고 있다. B-tree의 확장된 개념이다.

### 마치며
이전까지는 단순히 index는 테이블 검색 속도를 올려주는 기능으로만 생각했었지만 지금부터는 어떠한 자료구조<br>
형태로 동작하는지 또한 다른 자료구조들이 왜 적합하지 않은지 이유를 알게되어 좋은 정리글이 된 것 같다.<br>
앞으로도 성장하는 개발자가 되고싶다.



 










