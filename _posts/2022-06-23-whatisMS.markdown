---
layout: post
title:  "Master & Slave 이란?"
date:   2022-06-23 19:17:00 +0900
categories: Database
---

### 들어가며
만약 사용자가 급증하게 되면 어떻게 대처해야할까?? 여러 방법이 있겠지만 서버쪽으로는 스케일업이라든지<br>
로드밸런서를 이용하여 분산 처리 할 수 있다. 그럼 데이터베이스쪽으로는 어떤 방법이 있을까? 그게 바로 <br>
Master & Slave 방식이 있다. 그럼 자세히 알아보자.

### Master & Slave 개념
Replication(복제) 라는 의미로 Master에 있는 데이터를 Slave에 넣어두는 의미라고 보면 된다. <br>

##### Master & Slave Replication 순서
1. Master DB에 Insert, Update, Delete가 일어난다.
2. Master DB에 일어난 이벤트를 반영한다.
3. 변경 이력을 Binary Log로 저장.
4. 변경된 이벤트를 Slave DB에 전송
5. Slave IO Thread 에서 이벤트 캐치
6. Binary Log 를 Slave DB Relay Log에 저장
7. Slave SQL Thread에서 Relay Log 조회
8. Slave DB에 변경된 사항 저장

<img src="/public/img/master&slave2.png"  width="500" height="400"/>
###### 출저 : https://dalckom.tistory.com/3 <br><br>

### Master & Slave 구조
구조에 있는 사진을 보면 알겠지만 쓰기연산 같은 경우는 Master DB에서만 일어나고 <br>
읽기연산은 Slave DB에서 일어난다. 대부분의 애플리케이션은 읽기 연산의 비중이 <br>
쓰기 연산보다 훨씬 높다.

<img src="/public/img/master&slave.png"  width="400" height="300"/>
###### 출저 : https://jung-story.tistory.com/118?category=827598 <br><br>

### Master & Slave 장점
<img src="/public/img/master&slave3.png"  width="500" height="400"/><br>
###### 출저 : https://mariadb.com/resources/blog/database-master-slave-replication-in-the-cloud/ <br><br>
1. 성능향상
    - 쓰기 연산과 읽기 연산이 분리 되어있고, 특히 Slave DB 같은 경우는 더 늘려 분산 처리가 가능해 성능이 좋아진다.
   
2. 안정성
    - 데이터베이스 서버가 하나가 손실되도 데이터는 Master DB와 Slave DB에 다중화 되어 있어 보존이 가능하다.
   
3. 가용성
    - 데이터가 복제되어 있어 서버에 장애 발생 시 다른 서버에 있는 데이터를 가져와 서비스의 지속이 가능하다.

4. 혹시라도 Slave DB가 1개 인데 죽는다면 읽기 연산 즉 select 문은 안되는건가??
    - 아니다. Slave DB가 죽는다면 읽기 연산 Master DB가 대신한다.

### 마무리하며
서비스를 진행하다 보면 갑작스럽게 사용자가 늘어날수도 있다는 점을 항상 염두하고 대규모 시스템 설계에 항상 <br>
관심을 가지고 성장하는 개발자가 될 것이다.










