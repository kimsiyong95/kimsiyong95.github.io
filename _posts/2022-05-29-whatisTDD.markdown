---
layout: post
title:  "TDD(Test Driven Development) 란"
date:   2022-05-29 23:00:29 +0900
categories: SpringBoot
---

### 들어가며
현재 회사에서는 테스트 코드 문화가 없다 보니 그 문화를 만들기 위해 내용을 많이 찾아보고 있다.
매 번 해야지 생각만 하고 막상 실천을 하지 못했다. 그래서 이번 시간에는 TDD에 대한 간략한 개념 정도만
기록해보려고 한다.

### TDD 란?
테스트 주도 개발의 줄임말이다. 말 그대로 테스트를 우선시하는 개발이라고 할 수 있다.
자바를 예로 들면 일반적으로 클래스를 생성하고 프로퍼티와 메소드를 생성하고 코드를 실행한다.
그리고 콘솔이나 다른 방법으로 해당 코드가 잘 실행이 되었는지 눈으로 확인한다. 테스트 주도 개발은
조금 다르다. 가장 큰 차이점은 코드를 작성하기전에 테스트 코드를 먼저 작성한다는 것이다.
테스트 코드를 먼저 작성 함으로써 깔끔하고 단단한 코드를 작성하게 하는 밑거름이 될 수 있다.
그렇다고 테스트 코드를 먼저 작성하지 않고 작성한 코드가 잘못 됬다는 것은 아니다. 다만 
테스트 코드를 먼저 작성함으로써 오는 이점이 조금 더 크다는 점이다.

### TDD 장점
TDD 의 장점은 위에 언급 했었던 깔끔하고 단단한 코드를 만들 수 있다는 점이다. 또한 개발 코드의 수정 후 QA 및 기타 테스트를 수행하는 과정에서 유지보수가 용이하다는 점이다.

예를들어보자. 결제 프로젝트에서 결제 실행 코드 부분을 조금 수정했다고 하자. 
코드 수정이 끝난 후에는 다시 테스트가 진행되어야 한다. 
이때 수정된 부분에서만 테스트가 진행되는게 아니라 수정된 부분과 연결된 기존의 실행 과정 자체도 테스트가 되어야 한다.
만약 수정된 부분이 다른 코드와 종속적인 관계에 있다면 또 그 부분에서 오류가 발생한다면 과연 빠르게 찾아 낼 수 있을까? 
확실하게 찾아낼 수 있을까? 여기서 테스트 코드의 장점이 발휘된다.

### TDD 단점
가장 큰 단점은 바로 생산성의 저하다. 단순한 어플리케이션을 개발하는 경우 경험에 의해 어떤 예외상황이 발생할지 눈에 뻔히 보이는 경우가 많다. 
특히 이러한 단발성 개발은 개발 기간이 타이트하게 잡히는 경우가 많은데, 이럴 때 TDD를 적용해 뻔한 테스트 코드를 작성하고 그에 통과하기 위한 코드를 작성한다면 
마치 답을 알고 푸는 문제집처럼 따분하고 비효율 적일 것이다.

### TDD 작성방법
TDD 의 작성방법은 큰 틀에서 다음과 같다. 먼저 시나리오를 하나 선택한다. 
QA 및 기획팀에서 만들어 놓은 시나리오가 있으면 그걸 따라가면 된다. 
하지만 그렇지 않다면 개발자가 스스로의 테스트 시나리오를 작성해야 한다.
시나리오를 하나 선택했으면 그 시나리오에 대한 결과를 작성한다. 결과는 성공 또는 실패가 될 수 있다. 
아니면 테스트 코드 자체의 오류가 될 수 있다. 가급적 오류는 만들지 않도록 작성하자.
결과의 성공은 선택한 시나리오가 맞는 값, 의도된, 예측된 값등을 출력했다는 것을 의미하고, 실패는 맞지 않는, 의도하지 않은 값, 
예측에 실패 한 값등이 될 것이다. 끝으로 리팩토링이 있다. 시나리오를 선택하고 결과값을 판단하는 코드를 만들었다면 
이를 바탕으로 개발 코드를 리팩토링해야 한다.

### 마치며
TDD 는 개념이다. 어떤 프레임워크나 라이브러리를 사용하는 특정 기술이 아니라. 해당 기술을 부수적으로 사용하는 소프트웨어 설계 개념이라고 생각한다.
항상 테스트를 생활화 하는 개발자가 되고싶다.



