---
layout: post
title:  "트랜잭션 전파 설정"
date:   2022-06-09 18:00:00 +0900
categories: Spring
---

### 들어가며
개발을 하다가 트랜잭션을 클래스 상단에 걸거나 아니면 메소드위에 걸수도있다. 혹시 2개를 다 걸면 어떻게 되는지<br>
아니면 트랜잭션 별로 설정을 할 수 있는지... 이번에야 말로 트랜잭션에 대해 정확히 알기 위해 내용을 정리해본다.


### 트랜잭션 전파 설정이란
트랜잭션 전파란 트랜잭션 내부에서 트랜잭션을 또 호출하면 새로운 트랜잭션이 만들어지거나 부모 트랜잭션에 합류할 수도 있다.<br>
이렇게 진행하고 있는 트랜잭션에서 다른 트랜잭션이 호출 될 때 어떻게 처리할지 정하는 것이 '트랜잭션 전파 설정' 이라고 한다. <br>
Spring에서 지원하는 전파 속성은 7가지가 있다.
 - REQUIRED
 - SUPPORTS
 - MANDATORY
 - REQUIRES_NEW
 - NOT_SUPPORTED
 - NEVER
 - NESTED

##### REQUIRED(기본값)
 - 트랜잭션이 있는 경우 : 해당 트랜잭션을 그대로 사용
 - 트랜잭션이 없는 경우 : 트랜잭션 생성

##### SUPPORTS
 - 트랜잭션이 있는 경우 : 해당 트랜잭션을 사용
 - 트랜잭션이 없는 경우 : 트랜잭션을 사용하지 않음

##### MANDATORY
 - 트랜잭션이 있는 경우 : 해당 트랜잭션을 이용
 - 트랜잭션이 없는 경우 : 예외 발생

##### REQUIRES_NEW
 - 트랜잭션이 있는 경우 : 해당 트랜잭션 보류, 새로운 트랜잭션을 만듬

##### NOT_SUPPORTED
 - 트랜잭션이 있는 경우 : 해당 트랜잭션 보류, 트랜잭션이 없는 상태로 처리

##### NEVER
 - 트랜잭션이 있는 경우 : 예외 발생 후 트랜잭션을 사용하지 않도록 강제함

##### NESTED
 - 트랜잭션이 있는 경우 : 중첩된 트랜잭션을 생성하여 처리를 수행 (내부에서 롤백 발생 시 부모까지 전파 X)
 - 트랜잭션이 없는 경우 : 새로운 트랜잭션 생성

### 마치며
앞으로 트랜잭션을 사용할때는 보다 명확히 알고 사용해야 할 것 같다. 현재 실무에서는 REQUIRED로만 이용하여 적용하는데 <br>
좀 더 폭 넓게 사용해 기술에 대한 이해도를 높이고 싶다.






